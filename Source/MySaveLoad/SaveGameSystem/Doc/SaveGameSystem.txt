---- MARKING
- Interfaces for each object that is to be serialized into save game;

PROBLEM 1:
	Interfaces are added PER-CLASS;
	However, some objects are SAVEABLE per-object;

SOLUTION 1:
	Add flag in interface: SaveLoad_GetProps()->StaticFlag: SF_SAVEABLE;
	This flag should *NEVER* be DYNAMIC (meaning should be the same during lifetime of the world);

SAVING CLASSES:
	Id-To-Name table;

SAVING Object Props itself:
	---

IDENTIFICATION:
- Use Actor's *NAME* for IDENTIFICATION (It's up to the level designer to setup correct name);

--- LOADING *NON* Placeable-in-level Data (Level state, Game Instance, Game state, Player state):
	To be placed at the START of the ARCHIVE;
	To be DONE *MANUALLY* by the LOADER/SAVER;
	Support the save interface of saveable objects;
	Special FLAG in the SAVEABLE interface determines, whether we should SAVE it at the start,
	or at natural order;

	GLOBAL objects may NOT be DYNAMIC;

--- FIXING up LINKS between SERIALIZABLE objects;
	Some links may be fixed up only when ALL objects are loaded;
	That's why we must provide EVENT when ALL OBJECTS are DESERIALIZED;
	So, we have TWO PASSES of SERIALIZATION;	

--- PROBLEMS:
PROBLEM 1: 
	Some actors are ALREADY DESTROYED, or NOT spawned AT ALL after load;
	Spawn actors ONLY if THEY *NOT* exist, OTHERWISE *UPDATE* existing;

PROBLEM 2:
	Some actors should *NOT* be SPAWNED at all, so are REDUNDANT;
	So we must *DESTROY* THEM *ANYWAY* !!!!;

PROBLEM 3:
	There should be some list of DESTROYED actors!
	But only actors that was created INITIALLY.

--------------------
DESTROYING existing actors when LOADING POSES following PROBLEMS:
1. DESTROYING actor can cause TRIGGERs (for example some enemy destroyed => game ended);
2. WE MUST *DESTROY* *ANYWAY*!
	*PROVIDE* FLAG OnThe Save-system level: whether we'are saving or loading now;

